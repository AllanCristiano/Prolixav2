/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.analysis;

import prolixa.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseTThis(TThis node);
    void caseTIs(TIs node);
    void caseTProgram(TProgram node);
    void caseTIt(TIt node);
    void caseTPresents(TPresents node);
    void caseTLet(TLet node);
    void caseTUs(TUs node);
    void caseTBegin(TBegin node);
    void caseTThat(TThat node);
    void caseTWould(TWould node);
    void caseTBe(TBe node);
    void caseTAll(TAll node);
    void caseTNumber(TNumber node);
    void caseTSymbol(TSymbol node);
    void caseTAnswer(TAnswer node);
    void caseTYes(TYes node);
    void caseTNo(TNo node);
    void caseTAlterable(TAlterable node);
    void caseTUnalterable(TUnalterable node);
    void caseTAssign(TAssign node);
    void caseTEquals(TEquals node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTTimes(TTimes node);
    void caseTDivide(TDivide node);
    void caseTIntDiv(TIntDiv node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLe(TLe node);
    void caseTGe(TGe node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTJust(TJust node);
    void caseTIn(TIn node);
    void caseTCase(TCase node);
    void caseTThatKw(TThatKw node);
    void caseTDo(TDo node);
    void caseTOtherwise(TOtherwise node);
    void caseTAs(TAs node);
    void caseTLong(TLong node);
    void caseTConsidering(TConsidering node);
    void caseTFrom(TFrom node);
    void caseTTo(TTo node);
    void caseTBy(TBy node);
    void caseTAbandon(TAbandon node);
    void caseTGo(TGo node);
    void caseTNext(TNext node);
    void caseTIteration(TIteration node);
    void caseTCapture(TCapture node);
    void caseTShow(TShow node);
    void caseTLpar(TLpar node);
    void caseTRpar(TRpar node);
    void caseTLbracket(TLbracket node);
    void caseTRbracket(TRbracket node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTVoid(TVoid node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
